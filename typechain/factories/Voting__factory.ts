/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Voting, VotingInterface } from "../Voting";

const _abi = [
  {
    inputs: [
      {
        internalType: "string[]",
        name: "_candidateNames",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_candidateId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_voter",
        type: "address",
      },
    ],
    name: "VotedEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "candidates",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "candidatesCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_candidateId",
        type: "uint256",
      },
    ],
    name: "getVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_candidateId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voters",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningCandidate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620008c3380380620008c38339810160408190526200003491620001ae565b60005b81518110156200008f576200007a8282815181106200006657634e487b7160e01b600052603260045260246000fd5b60200260200101516200009760201b60201c565b80620000868162000339565b91505062000037565b505062000377565b60018054906000620000a98362000339565b9091555050604080516060810182526001805480835260208084018681526000858701819052928352828252949091208351815593518051939493620000f793850192919091019062000108565b506040820151816002015590505050565b8280546200011690620002fc565b90600052602060002090601f0160209004810192826200013a576000855562000185565b82601f106200015557805160ff191683800117855562000185565b8280016001018555821562000185579182015b828111156200018557825182559160200191906001019062000168565b506200019392915062000197565b5090565b5b8082111562000193576000815560010162000198565b60006020808385031215620001c1578182fd5b82516001600160401b0380821115620001d8578384fd5b8185019150601f8681840112620001ed578485fd5b82518281111562000202576200020262000361565b620002118586830201620002d0565b81815285810190858701885b84811015620002c057815188018c603f82011262000239578a8bfd5b898101518881111562000250576200025062000361565b62000263818901601f19168c01620002d0565b81815260408f8184860101111562000279578d8efd5b8d5b8381101562000298578481018201518382018f01528d016200027b565b83811115620002a9578e8e85850101525b50508652505092880192908801906001016200021d565b50909a9950505050505050505050565b6040518181016001600160401b0381118282101715620002f457620002f462000361565b604052919050565b6002810460018216806200031157607f821691505b602082108114156200033357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200035a57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b61053c80620003876000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806302d947ef146100675780632d35a8a21461007c5780633477ee2e1461009a578063a3ec138d146100bc578063d28178d7146100dc578063ff981099146100e4575b600080fd5b61007a61007536600461039c565b6100f7565b005b6100846101e4565b6040516100919190610438565b60405180910390f35b6100ad6100a8366004610384565b6101ea565b60405161009193929190610441565b6100cf6100ca366004610363565b610295565b60405161009191906103db565b6100846102aa565b6100846100f2366004610384565b610304565b6001600160a01b03811660009081526002602052604090205460ff16156101395760405162461bcd60e51b8152600401610130906103e6565b60405180910390fd5b60008211801561014b57506001548211155b6101675760405162461bcd60e51b81526004016101309061040d565b6001600160a01b0381166000908152600260208181526040808420805460ff19166001179055858452908390528220018054916101a3836104df565b9190505550817fef0a8c30b864cd88d58d772c577afd36560b80a69c4eea26d684aa68cca2b1e5826040516101d891906103c7565b60405180910390a25050565b60015481565b6000602081905290815260409020805460018201805491929161020c906104a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610238906104a4565b80156102855780601f1061025a57610100808354040283529160200191610285565b820191906000526020600020905b81548152906001019060200180831161026857829003601f168201915b5050505050908060020154905083565b60026020526000908152604090205460ff1681565b6000808060015b60015481116102fd576000818152602081905260409020600201548310156102eb5760008181526020819052604090206002015492509050805b806102f5816104df565b9150506102b1565b5091505090565b6000808211801561031757506001548211155b6103335760405162461bcd60e51b81526004016101309061040d565b506000818152602081905260409020600201545b919050565b80356001600160a01b038116811461034757600080fd5b600060208284031215610374578081fd5b61037d8261034c565b9392505050565b600060208284031215610395578081fd5b5035919050565b600080604083850312156103ae578081fd5b823591506103be6020840161034c565b90509250929050565b6001600160a01b0391909116815260200190565b901515815260200190565b6020808252600d908201526c105b1c9958591e481d9bdd1959609a1b604082015260600190565b602080825260119082015270496e76616c69642063616e64696461746560781b604082015260600190565b90815260200190565b600084825260206060818401528451806060850152825b8181101561047457868101830151858201608001528201610458565b818111156104855783608083870101525b5060408401949094525050601f91909101601f19160160800192915050565b6002810460018216806104b857607f821691505b602082108114156104d957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156104ff57634e487b7160e01b81526011600452602481fd5b506001019056fea2646970667358221220bdbb70a3a5da6f26dff71be443f0ab99ceab6572514ac73fa6a5fafd9605c85864736f6c63430008000033";

type VotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Voting__factory extends ContractFactory {
  constructor(...args: VotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _candidateNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Voting> {
    return super.deploy(_candidateNames, overrides || {}) as Promise<Voting>;
  }
  override getDeployTransaction(
    _candidateNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_candidateNames, overrides || {});
  }
  override attach(address: string): Voting {
    return super.attach(address) as Voting;
  }
  override connect(signer: Signer): Voting__factory {
    return super.connect(signer) as Voting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingInterface {
    return new utils.Interface(_abi) as VotingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Voting {
    return new Contract(address, _abi, signerOrProvider) as Voting;
  }
}
